// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.sixvu.webui;

import com.sixvu.domain.Person;
import com.sixvu.domain.Video;
import java.lang.Long;
import java.lang.String;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.validation.Valid;
import org.joda.time.format.DateTimeFormat;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.core.convert.converter.Converter;
import org.springframework.core.convert.support.GenericConversionService;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

privileged aspect VideoController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST)
    public String VideoController.create(@Valid Video video, BindingResult result, Model model) {
        if (result.hasErrors()) {
            model.addAttribute("video", video);
            addDateTimeFormatPatterns(model);
            return "videos/create";
        }
        video.persist();
        return "redirect:/videos/" + video.getId();
    }
    
    @RequestMapping(params = "form", method = RequestMethod.GET)
    public String VideoController.createForm(Model model) {
        model.addAttribute("video", new Video());
        addDateTimeFormatPatterns(model);
        List dependencies = new ArrayList();
        if (Person.countPeople() == 0) {
            dependencies.add(new String[]{"Person", "people"});
        }
        model.addAttribute("dependencies", dependencies);
        return "videos/create";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    public String VideoController.show(@PathVariable("id") Long id, Model model) {
        addDateTimeFormatPatterns(model);
        model.addAttribute("video", Video.findVideo(id));
        model.addAttribute("itemId", id);
        return "videos/show";
    }
    
    @RequestMapping(method = RequestMethod.GET)
    public String VideoController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model model) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            model.addAttribute("videos", Video.findVideoEntries(page == null ? 0 : (page.intValue() - 1) * sizeNo, sizeNo));
            float nrOfPages = (float) Video.countVideos() / sizeNo;
            model.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            model.addAttribute("videos", Video.findAllVideos());
        }
        addDateTimeFormatPatterns(model);
        return "videos/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT)
    public String VideoController.update(@Valid Video video, BindingResult result, Model model) {
        if (result.hasErrors()) {
            model.addAttribute("video", video);
            addDateTimeFormatPatterns(model);
            return "videos/update";
        }
        video.merge();
        return "redirect:/videos/" + video.getId();
    }
    
    @RequestMapping(value = "/{id}", params = "form", method = RequestMethod.GET)
    public String VideoController.updateForm(@PathVariable("id") Long id, Model model) {
        model.addAttribute("video", Video.findVideo(id));
        addDateTimeFormatPatterns(model);
        return "videos/update";
    }
    
    @ModelAttribute("people")
    public Collection<Person> VideoController.populatePeople() {
        return Person.findAllPeople();
    }
    
    Converter<Person, String> VideoController.getPersonConverter() {
        return new Converter<Person, String>() {
            public String convert(Person person) {
                return new StringBuilder().append(person.getUserName()).append(" ").append(person.getEmail()).append(" ").append(person.getPassWord()).toString();
            }
        };
    }
    
    Converter<Video, String> VideoController.getVideoConverter() {
        return new Converter<Video, String>() {
            public String convert(Video video) {
                return new StringBuilder().append(video.getTitle()).append(" ").append(video.getDateAdd()).toString();
            }
        };
    }
    
    @InitBinder
    void VideoController.registerConverters(WebDataBinder binder) {
        if (binder.getConversionService() instanceof GenericConversionService) {
            GenericConversionService conversionService = (GenericConversionService) binder.getConversionService();
            conversionService.addConverter(getPersonConverter());
            conversionService.addConverter(getVideoConverter());
        }
    }
    
    void VideoController.addDateTimeFormatPatterns(Model model) {
        model.addAttribute("video_dateadd_date_format", DateTimeFormat.patternForStyle("MM", LocaleContextHolder.getLocale()));
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public String VideoController.showJson(@PathVariable("id") Long id) {
        return Video.findVideo(id).toJson();
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> VideoController.createFromJson(@RequestBody String json) {
        Video.fromJsonToVideo(json).persist();
        return new ResponseEntity<String>("Video created", HttpStatus.CREATED);
    }
    
    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
    public String VideoController.listJson() {
        return Video.toJsonArray(Video.findAllVideos());
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> VideoController.createFromJsonArray(@RequestBody String json) {
        for (Video video: Video.fromJsonArrayToVideos(json)) {
            video.persist();
        }
        return new ResponseEntity<String>("Video created", HttpStatus.CREATED);
    }
    
}
